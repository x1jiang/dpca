}
#write the output
cat<-matrix(unlist(cat),1,p)
hash
levels(x[,3])
x[(x[,3]=='N'),3]
1:(dim(x)[1])[(x[,3]=='N')]
x[,3]=='N'
sum(x[,3]=='N')
nn=sum(x[,3]=='N')
length(nn)
nn=x[,3]=='N'
length(nn)
1:30719[nn]
(1:30719)[nn]
nn[1]
x[,3]
x<-read.table(inputfile)
cat<-x[1,]
p<-dim(x)[2]
n<-dim(x)[1]-1
nom<-(cat=='N')#whether nominal or not
#count the total variables and find the names
vc<-0
vc1<-c()
hash<-list()
for (i in 1:p)
{
if (nom[i])
{
le<-levels(x[2:(n+1),i])
vc1<-c(vc1,vc)
vc<-vc+length(le)
hash<-c(hash,list(le))
}
else
{
vc1<-c(vc1,vc)
vc<-vc+1
hash<-c(hash,list(""))
}
}
hash
i=2
le<-levels(x[2:(n+1),i])
ls
le
nn=x[2,1]
nn=x[2,2]
x[2,2]
nn=(x[2:(n+1),2]=='N')
1:length(nn)[nn]
nn
length(nn)
1:30718[nn]
nn[1]
nn[30718]
nn[30719]
hash[2]
x[2:10,i]
levels(x[2:(n+1),i])
levels(x[2:100,i])
levels(x[2:2,i])
v=x[2:100,i]
levels(v)
unique(x[2:2,i])
unique(x[2:(n+1),i])
#load data
x<-read.table(inputfile)
cat<-x[1,]
p<-dim(x)[2]
n<-dim(x)[1]-1
nom<-(cat=='N')#whether nominal or not
#count the total variables and find the names
vc<-0
vc1<-c()
hash<-list()
for (i in 1:p)
{
if (nom[i])
{
le<-unique(x[2:(n+1),i])
vc1<-c(vc1,vc)
vc<-vc+length(le)
hash<-c(hash,list(le))
}
else
{
vc1<-c(vc1,vc)
vc<-vc+1
hash<-c(hash,list(""))
}
}
hash
nom[12]
nom[11]
x[2:(n+1),11]
uniqye(x[2:(n+1),11])
unique(x[2:(n+1),11])
hash<-list()
i=1
if (nom[i])
{
le<-unique(x[2:(n+1),i])
vc1<-c(vc1,vc)
vc<-vc+length(le)
hash<-c(hash,list(le))
}
else
{
vc1<-c(vc1,vc)
vc<-vc+1
hash<-c(hash,list(""))
}
for (i in 1:p)
{
if (nom[i])
{
le<-unique(x[2:(n+1),i])
vc1<-c(vc1,vc)
vc<-vc+length(le)
hash<-c(hash,list(le))
}
else
{
vc1<-c(vc1,vc)
vc<-vc+1
hash<-c(hash,list(""))
}
}
hash
p
dim(x)
vc<-0
vc1<-c()
hash<-list()
for (i in 1:p)
{
if (nom[i])
{
le<-unique(x[2:(n+1),i])
vc1<-c(vc1,vc)
vc<-vc+length(le)
hash<-c(hash,list(le))
}
else
{
vc1<-c(vc1,vc)
vc<-vc+1
hash<-c(hash,list(""))
}
}
hash
x<-read.table(inputfile)
cat<-x[1,]
p<-dim(x)[2]
n<-dim(x)[1]-1
nom<-(cat=='N')#whether nominal or not
#count the total variables and find the names
vc<-0
vc1<-c()
hash<-list()
for (i in 1:p)
{
if (nom[i])
{
le<-unique(x[2:(n+1),i])
vc1<-c(vc1,vc)
vc<-vc+length(le)
hash<-c(hash,list(le))
}
else
{
vc1<-c(vc1,vc)
vc<-vc+1
hash<-c(hash,list(""))
}
}
hash
p
x<-read.table(inputfile)
cat<-x[1,]
p<-dim(x)[2]
n<-dim(x)[1]-1
nom<-(cat=='N')#whether nominal or not
#count the total variables and find the names
vc<-0
vc1<-c()
hash<-list()
for (i in 1:p)
{
if (nom[i])
{
le<-unique(x[2:(n+1),i])
vc1<-c(vc1,vc)
vc<-vc+length(le)
hash<-c(hash,list(le))
}
else
{
vc1<-c(vc1,vc)
vc<-vc+1
hash<-c(hash,list(""))
}
}
hash
vc1<-c(vc1,vc)
vc1<-vc1+1
data<-matrix(0,n,vc)# the data matrix
minv<- rep(0,p)
maxv<-rep(0,p)
#step1, transform, normalize and store the data
for (i in 1:p)
{
if (nom[i])
{
v <- x[2:(n+1),i]
ov <- order(v)
v<-v[ov]
j<-1
rec<-v[1]
for (k in 1:n)
{
if (v[k]==rec)
{
data[ov[k],vc1[i]-1+j] <- 1
}
else
{
j<-j+1
rec<-v[k]
data[ov[k],vc1[i]-1+j] <- 1
}
}
}
else
{
v<-x[2:(n+1),i]
v<-as.numeric(matrix(unlist(v),length(v),1))
minv[i]<-min(v)
maxv[i]<-max(v)
data[,vc1[i]]<-(v-minv[i])/(maxv[i]-minv[i])
}
}
#step2, get the statistis
p2<-sum(nom)
p1<-p-p2
m1<-rep(1/n,n)%*%data
s<-2*(p1+p2*2+((p+1)*p+(p2+1)*p2)/2)/epsilon
m2<-t(data)%*%data/n
#step3, generate noisy statistics
m1<-m1+lap(s/n,vc)
for (i in 1:vc)
{
m2[i,i:vc]<-m2[i,i:vc]+lap(s/n,vc-i+1)
}
for (i in 1:vc)
{
m2[i,1:(i-1)]<-m2[1:(i-1),i]
}
#step4, get uk
covar<-m2-t(m1)%*%m1
eigens<-eigen(covar)
if (k<1)
k<-1
if (k>vc)
k<-vc
u<-matrix(unlist(eigens$vectors),vc,vc)
uk<-u[,1:k]
#step5, get noisy data
noisescale<-2*sqrt(k*vc)/epsilon
md<-(data-rep(1/n,n)%*%m1)%*%uk+lap(noisescale, n*vc)
md<-md%*%t(uk)
for (i in 1:vc)
data[,i]<-md[,i]+m1[,i]
#change form, select one value for each nominal variable
for (i in 1:p)
{
if (nom[i])
{
range<-vc1[i]:(vc1[i+1]-1)
for (j in 1:n)
{
l<-data[j,range]
l<-(max(l)==l)
data[j,range]<-l
}
}
}
data
data1=data
data[,2]
dim(data)
cv
vc
i=2
labels<-unlist(hash[i])
labels[3]
labels<-c(unlist(hash[i]))
labels[3]
labels
labels<-unlist(hash[i])
labels
y<-matrix(0,n,p)
for (i in 1:p)
{
if (nom[i])
{
labels<-unlist(hash[i])
for (j in vc1[i]:(vc1[i+1]-1))
{
label<-(data[,j]==1)
y[label,i]<-labels[j-vc1[i]+1]
}
}
else
{
y[,i]<-data[,vc1[i]]*(maxv[i]-minv[i])+minv[i]
}
}
y[,2]
y<-matrix(0,n,p)
for (i in 1:p)
{
if (nom[i])
{
labels<-hash[i]
for (j in vc1[i]:(vc1[i+1]-1))
{
label<-(data[,j]==1)
y[label,i]<-labels[j-vc1[i]+1]
}
}
else
{
y[,i]<-data[,vc1[i]]*(maxv[i]-minv[i])+minv[i]
}
}
labals
labels
labels[1]
i
labels<-unlist(hash[i])
labels
labels[3
]
d=matrix(0,2,2)
d[1,1]=labels[3]
d
d[1,]=labels[3]
d
d[,1]=labels[3]
d
labels[3]
y<-x[1:n,1:p]
for (i in 1:p)
{
if (nom[i])
{
labels<-unlist(hash[i])
for (j in vc1[i]:(vc1[i+1]-1))
{
label<-(data[,j]==1)
y[label,i]<-labels[j-vc1[i]+1]
}
}
else
{
y[,i]<-data[,vc1[i]]*(maxv[i]-minv[i])+minv[i]
}
}
y[,2]
y[,1]
y[,11]
y[,12]
y[,10]
#load data
x<-read.table(inputfile)
cat<-x[1,]
p<-dim(x)[2]
n<-dim(x)[1]-1
nom<-(cat=='N')#whether nominal or not
#count the total variables and find the names
vc<-0
vc1<-c()
hash<-list()
for (i in 1:p)
{
if (nom[i])
{
le<-unique(x[2:(n+1),i])
vc1<-c(vc1,vc)
vc<-vc+length(le)
hash<-c(hash,list(le))
}
else
{
vc1<-c(vc1,vc)
vc<-vc+1
hash<-c(hash,list(""))
}
}
vc1<-c(vc1,vc)
vc1<-vc1+1
data<-matrix(0,n,vc)# the data matrix
minv<- rep(0,p)
maxv<-rep(0,p)
#step1, transform, normalize and store the data
for (i in 1:p)
{
if (nom[i])
{
v <- x[2:(n+1),i]
ov <- order(v)
v<-v[ov]
j<-1
rec<-v[1]
for (k in 1:n)
{
if (v[k]==rec)
{
data[ov[k],vc1[i]-1+j] <- 1
}
else
{
j<-j+1
rec<-v[k]
data[ov[k],vc1[i]-1+j] <- 1
}
}
}
else
{
v<-x[2:(n+1),i]
v<-as.numeric(matrix(unlist(v),length(v),1))
minv[i]<-min(v)
maxv[i]<-max(v)
data[,vc1[i]]<-(v-minv[i])/(maxv[i]-minv[i])
}
}
#step2, get the statistis
p2<-sum(nom)
p1<-p-p2
m1<-rep(1/n,n)%*%data
s<-2*(p1+p2*2+((p+1)*p+(p2+1)*p2)/2)/epsilon
m2<-t(data)%*%data/n
#step3, generate noisy statistics
m1<-m1+lap(s/n,vc)
for (i in 1:vc)
{
m2[i,i:vc]<-m2[i,i:vc]+lap(s/n,vc-i+1)
}
for (i in 1:vc)
{
m2[i,1:(i-1)]<-m2[1:(i-1),i]
}
#step4, get uk
covar<-m2-t(m1)%*%m1
eigens<-eigen(covar)
if (k<1)
k<-1
if (k>vc)
k<-vc
u<-matrix(unlist(eigens$vectors),vc,vc)
uk<-u[,1:k]
#step5, get noisy data
noisescale<-2*sqrt(k*vc)/epsilon
md<-(data-rep(1/n,n)%*%m1)%*%uk+lap(noisescale, n*vc)
md<-md%*%t(uk)
for (i in 1:vc)
data[,i]<-md[,i]+m1[,i]
#change form, select one value for each nominal variable
for (i in 1:p)
{
if (nom[i])
{
range<-vc1[i]:(vc1[i+1]-1)
for (j in 1:n)
{
l<-data[j,range]
l<-(max(l)==l)
data[j,range]<-l
}
}
}
#transform to the original form and save in y
y<-x[1:n,1:p]
for (i in 1:p)
{
if (nom[i])
{
labels<-unlist(hash[i])
for (j in vc1[i]:(vc1[i+1]-1))
{
label<-(data[,j]==1)
y[label,i]<-labels[j-vc1[i]+1]
}
}
else
{
y[,i]<-data[,vc1[i]]*(maxv[i]-minv[i])+minv[i]
}
}
cat<-matrix(unlist(cat),1,p)
write.table(rbind(cat,y), outputfile, col.names=colnames(x), row.names=FALSE, sep=" ")
?write.table
cat<-matrix(unlist(cat),1,p)
write.table(cat, outputfile, col.names=colnames(x), row.names=FALSE, sep="")
write.table(y, outputfile, append=TRUE, col.names=colnames(x), row.names=FALSE, sep=" ")
cat<-matrix(unlist(cat),1,p)
write.table(cat, outputfile, col.names=colnames(x), row.names=FALSE, sep="")
write.table(y, outputfile, append=TRUE, col.names=FALSE, row.names=FALSE, sep=" ")
